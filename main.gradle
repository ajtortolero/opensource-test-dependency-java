allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    compileJava.dependsOn validateStructure
    sourceCompatibility = JavaVersion.VERSION_17

    test {
        useJUnitPlatform()
    }

        dependencies {
        implementation 'org.springframework:spring-context'
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'software.amazon.awssdk:s3'
        implementation group: 'software.amazon.awssdk', name: 's3control', version: '2.17.267'
        testImplementation group: 'org.mockito', name: 'mockito-inline', version: '4.7.0'
        implementation 'io.projectreactor:reactor-core'
        implementation 'io.projectreactor.addons:reactor-extra'

        testImplementation 'io.projectreactor.tools:blockhound-junit-platform:1.0.8.RELEASE'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly  "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }

    tasks.withType(Test).configureEach {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {
            jvmArgs += [
                    "-XX:+AllowRedefinitionToAddDeleteMethods"
            ]
        }
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    jacocoTestReport {
        dependsOn test
        reports {
            xml.setRequired true
            xml.setOutputLocation layout.buildDirectory.file("reports/jacoco.xml")
            csv.setRequired false
            html.setOutputLocation layout.buildDirectory.dir("reports/jacocoHtml")
        }
    }

}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory.set(layout.buildDirectory.dir("reports"))
}

licenseReport {
    // renderers = [new InventoryHtmlReportRenderer('report.html', 'Backend')]
    // filters = [new LicenseBundleNormalizer()]
    // importers = [new XmlReportImporter('Front End', new File(project.projectDir, 'externalDependencies.xml'))]
    // configurations = ALL
    
    outputDir = file("build/reports/dependency-license")
    configurations = ['runtimeClasspath']
    // renderers = [
    //     new XmlReportRenderer(),  // Renderizador para informes en formato XML
    //     new CsvReportRenderer()   // Renderizador para informes en formato CSV
    // ]
}

tasks.register('jacocoMergedReport', JacocoReport) {
    dependsOn = [test, subprojects.jacocoTestReport]
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.setRequired true
        csv.setRequired false
        html.setRequired true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

tasks.named('wrapper') {
    gradleVersion = '8.7'
}

